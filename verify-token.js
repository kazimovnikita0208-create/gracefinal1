// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const https = require('https');

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const BOT_TOKEN = '7725254943:AAGHFlrj2oDfLxjrNaWjYuJ_nhUlgr2qLZU';
// –í–∞—à Telegram ID (–∏–∑ –ª–æ–≥–æ–≤)
const CHAT_ID = 621447493;

console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞...');
console.log('ü§ñ –¢–æ–∫–µ–Ω:', BOT_TOKEN);

// –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ getMe
const getMeOptions = {
  hostname: 'api.telegram.org',
  port: 443,
  path: `/bot${BOT_TOKEN}/getMe`,
  method: 'GET'
};

const getMeReq = https.request(getMeOptions, (res) => {
  console.log('üìä –°—Ç–∞—Ç—É—Å getMe:', res.statusCode);
  
  let data = '';
  res.on('data', (chunk) => {
    data += chunk;
  });
  
  res.on('end', () => {
    try {
      const response = JSON.parse(data);
      console.log('üìã –û—Ç–≤–µ—Ç –æ—Ç getMe:', response);
      
      if (res.statusCode === 200 && response.ok) {
        console.log('‚úÖ –¢–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç! –ë–æ—Ç:', response.result.first_name);
        console.log('‚úÖ Username –±–æ—Ç–∞:', response.result.username);
        console.log('‚úÖ ID –±–æ—Ç–∞:', response.result.id);
        
        // –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
        
        const message = {
          chat_id: CHAT_ID,
          text: 'üß™ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞ verify-token.js.\n\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!'
        };
        
        const sendMessageOptions = {
          hostname: 'api.telegram.org',
          port: 443,
          path: `/bot${BOT_TOKEN}/sendMessage`,
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(JSON.stringify(message))
          }
        };
        
        const sendMessageReq = https.request(sendMessageOptions, (sendRes) => {
          console.log('üìä –°—Ç–∞—Ç—É—Å sendMessage:', sendRes.statusCode);
          
          let sendData = '';
          sendRes.on('data', (chunk) => {
            sendData += chunk;
          });
          
          sendRes.on('end', () => {
            try {
              const sendResponse = JSON.parse(sendData);
              console.log('üìã –û—Ç–≤–µ—Ç –æ—Ç sendMessage:', sendResponse);
              
              if (sendRes.statusCode === 200 && sendResponse.ok) {
                console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
                console.log('‚úÖ Message ID:', sendResponse.result.message_id);
              } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', sendResponse.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
              }
            } catch (e) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ sendMessage:', e.message);
            }
          });
        });
        
        sendMessageReq.on('error', (err) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ sendMessage:', err.message);
        });
        
        sendMessageReq.write(JSON.stringify(message));
        sendMessageReq.end();
        
      } else {
        console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', response.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ getMe:', e.message);
    }
  });
});

getMeReq.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ getMe:', err.message);
});

getMeReq.end();
