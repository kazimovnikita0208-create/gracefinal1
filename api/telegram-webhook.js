// –ü—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—á–∏–π webhook –¥–ª—è Telegram –±–æ—Ç–∞
export default async function handler(req, res) {
  console.log('üì® WEBHOOK: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å', req.method, req.url);
  console.log('üì® WEBHOOK: Headers:', JSON.stringify(req.headers, null, 2));
  console.log('üì® WEBHOOK: Body:', JSON.stringify(req.body, null, 2));
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OPTIONS –∑–∞–ø—Ä–æ—Å—ã
  if (req.method === 'OPTIONS') {
    console.log('üì® WEBHOOK: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OPTIONS');
    res.status(200).end();
    return;
  }

  // –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    console.log('üì® WEBHOOK: –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥', req.method);
    res.status(405).json({ error: 'Method not allowed' });
    return;
  }

  try {
    console.log('üì® WEBHOOK: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º POST –∑–∞–ø—Ä–æ—Å...');
    
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    console.log('üì® WEBHOOK: Bot token exists:', !!botToken);
    
    if (!botToken) {
      console.error('‚ùå WEBHOOK: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
      res.status(500).json({ error: 'Bot token not found' });
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if (req.body.message) {
      const message = req.body.message;
      console.log('üí¨ WEBHOOK: –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.text);
      console.log('üí¨ WEBHOOK: –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', message.from.first_name);
      
      let responseText = '';
      let replyMarkup = null;
      
      if (message.text === '/start') {
        responseText = 'üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Grace Beauty Salon!\n\n‚ú® –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n‚Ä¢ –ú–∞–Ω–∏–∫—é—Ä –∏ –ø–µ–¥–∏–∫—é—Ä\n‚Ä¢ –ú–∞—Å—Å–∞–∂ –∏ SPA\n‚Ä¢ –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏\n‚Ä¢ –ù–æ–≥—Ç–µ–≤–æ–π –¥–∏–∑–∞–π–Ω\n\nüì± –ù–∞–∂–º–∏—Ç–µ /app —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏!';
        console.log('üí¨ WEBHOOK: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º /start');
      } else if (message.text === '/app') {
        const webAppUrl = 'https://gracefinal1.vercel.app';
        responseText = 'üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏...';
        replyMarkup = {
          inline_keyboard: [
            [
              {
                text: 'üåü –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É',
                web_app: { url: webAppUrl }
              }
            ]
          ]
        };
        console.log('üí¨ WEBHOOK: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º /app');
      } else if (message.text === '/help') {
        responseText = 'üÜò –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n/app - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\nüí¨ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∑–≤–æ–Ω–∏—Ç–µ: +7 (XXX) XXX-XX-XX';
        console.log('üí¨ WEBHOOK: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º /help');
      } else {
        responseText = 'üëã –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /app\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:';
        replyMarkup = {
          inline_keyboard: [
            [
              {
                text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                web_app: { url: 'https://gracefinal1.vercel.app' }
              }
            ]
          ]
        };
        console.log('üí¨ WEBHOOK: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
      console.log('üì§ WEBHOOK: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram...');
      console.log('üì§ WEBHOOK: Chat ID:', message.chat.id);
      console.log('üì§ WEBHOOK: Response text:', responseText);
      
      const telegramResponse = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: message.chat.id,
          text: responseText,
          reply_markup: replyMarkup
        })
      });
      
      const telegramResult = await telegramResponse.json();
      console.log('üì§ WEBHOOK: –û—Ç–≤–µ—Ç –æ—Ç Telegram API:', JSON.stringify(telegramResult, null, 2));
      
      if (telegramResult.ok) {
        console.log('‚úÖ WEBHOOK: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        res.status(200).json({ success: true, telegramResult });
      } else {
        console.error('‚ùå WEBHOOK: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', telegramResult);
        res.status(500).json({ error: 'Failed to send message', details: telegramResult });
      }
    } else {
      console.log('üì® WEBHOOK: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞');
      res.status(200).json({ success: true, message: 'No message found' });
    }
    
  } catch (error) {
    console.error('‚ùå WEBHOOK: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    res.status(500).json({ error: 'Internal Server Error', details: error.message });
  }
}