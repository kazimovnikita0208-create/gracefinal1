const express = require('express');
const cors = require('cors');
const { PrismaClient } = require('@prisma/client');

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BigInt
function serializeBigInt(obj) {
  if (obj === null || obj === undefined) return obj;
  if (typeof obj === 'bigint') return obj.toString();
  if (Array.isArray(obj)) return obj.map(serializeBigInt);
  if (typeof obj === 'object') {
    const result = {};
    for (const key in obj) {
      result[key] = serializeBigInt(obj[key]);
    }
    return result;
  }
  return obj;
}

const app = express();

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
console.log('DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
console.log('NODE_ENV:', process.env.NODE_ENV);
console.log('VERCEL:', process.env.VERCEL);
console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL —Å Session Pooler');

let prisma;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Prisma Client
function createPrismaClient() {
  try {
    const client = new PrismaClient({
      log: ['query', 'info', 'warn', 'error'],
    });
    console.log('‚úÖ Prisma Client —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    return client;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Prisma Client:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è Prisma Client
async function getPrismaClient() {
  try {
    if (!prisma) {
      prisma = createPrismaClient();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    return prisma;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç
    try {
      if (prisma) {
        await prisma.$disconnect();
      }
    } catch (disconnectError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:', disconnectError);
    }
    
    prisma = createPrismaClient();
    await prisma.$connect();
    return prisma;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Prisma Client
prisma = createPrismaClient();

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initializeDatabase() {
  try {
    console.log('üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    const masterCount = await prisma.master.count();
    
    if (masterCount > 0) {
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      return;
    }
    
    console.log('üå± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤
    const master1 = await prisma.master.create({
      data: {
        name: '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
        specialization: '–ú–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞',
        description: '–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä —Å 5-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º –∏ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–º –º–∞–Ω–∏–∫—é—Ä–µ.',
        photoUrl: 'https://via.placeholder.com/300x300/ec4899/ffffff?text=AI',
        experience: 5,
        isActive: true,
      }
    });

    const master2 = await prisma.master.create({
      data: {
        name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
        specialization: '–ú–∞—Å—Ç–µ—Ä –ø–µ–¥–∏–∫—é—Ä–∞',
        description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–º—É –ø–µ–¥–∏–∫—é—Ä—É —Å 3-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.',
        photoUrl: 'https://via.placeholder.com/300x300/ec4899/ffffff?text=MP',
        experience: 3,
        isActive: true,
      }
    });

    const master3 = await prisma.master.create({
      data: {
        name: '–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
        specialization: '–ú–∞—Å—Ç–µ—Ä –±—Ä–æ–≤–µ–π',
        description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∏ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—é –±—Ä–æ–≤–µ–π.',
        photoUrl: 'https://via.placeholder.com/300x300/ec4899/ffffff?text=ES',
        experience: 4,
        isActive: true,
      }
    });

    // –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥–∏
    const service1 = await prisma.service.create({
      data: {
        name: '–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
        description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫–æ–º',
        price: 1500,
        duration: 60,
        category: '–ú–∞–Ω–∏–∫—é—Ä',
        isActive: true,
      }
    });

    const service2 = await prisma.service.create({
      data: {
        name: '–ü–µ–¥–∏–∫—é—Ä –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π',
        description: '–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –ø–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫–æ–º',
        price: 2000,
        duration: 90,
        category: '–ü–µ–¥–∏–∫—é—Ä',
        isActive: true,
      }
    });

    const service3 = await prisma.service.create({
      data: {
        name: '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –±—Ä–æ–≤–µ–π',
        description: '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ñ–æ—Ä–º—ã –±—Ä–æ–≤–µ–π –≤–æ—Å–∫–æ–º',
        price: 800,
        duration: 30,
        category: '–ë—Ä–æ–≤–∏',
        isActive: true,
      }
    });

    const service4 = await prisma.service.create({
      data: {
        name: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π',
        description: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π –∫—Ä–∞—Å–∫–æ–π',
        price: 1200,
        duration: 45,
        category: '–ë—Ä–æ–≤–∏',
        isActive: true,
      }
    });

    // –°–≤—è–∑—ã–≤–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤ —Å —É—Å–ª—É–≥–∞–º–∏
    await prisma.masterService.createMany({
      data: [
        { masterId: master1.id, serviceId: service1.id },
        { masterId: master2.id, serviceId: service2.id },
        { masterId: master3.id, serviceId: service3.id },
        { masterId: master3.id, serviceId: service4.id },
      ]
    });

    // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    const scheduleData = [];
    for (let masterId of [master1.id, master2.id, master3.id]) {
      for (let dayOfWeek = 1; dayOfWeek <= 5; dayOfWeek++) {
        scheduleData.push({
          masterId: masterId,
          dayOfWeek: dayOfWeek,
          startTime: '09:00',
          endTime: '18:00',
          isWorking: true,
        });
      }
      scheduleData.push({
        masterId: masterId,
        dayOfWeek: 6,
        startTime: '10:00',
        endTime: '16:00',
        isWorking: true,
      });
    }

    await prisma.masterSchedule.createMany({
      data: scheduleData
    });

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.create({
      data: {
        telegramId: BigInt(123456789),
        firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        username: 'testuser',
        phone: '+7 (999) 123-45-67',
        isActive: true,
      }
    });

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(14, 0, 0, 0);

    await prisma.appointment.create({
      data: {
        userId: user.id,
        masterId: master1.id,
        serviceId: service1.id,
        appointmentDate: tomorrow,
        notes: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å',
        totalPrice: service1.price,
        status: 'PENDING',
      }
    });

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    await prisma.admin.create({
      data: {
        telegramId: BigInt(987654321),
        firstName: '–ê–¥–º–∏–Ω',
        lastName: '–°–∏—Å—Ç–µ–º—ã',
        username: 'admin',
        isActive: true,
      }
    });

    console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: error.message,
      code: error.code,
      meta: error.meta
    });
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initializeDatabase();

// Middleware
app.use(cors({
  origin: ['https://gracefinal.vercel.app', 'https://web.telegram.org'],
  credentials: true
}));

app.use(express.json({ limit: '10mb' }));

// Health check
app.get('/api/health', (req, res) => {
  res.json({ 
    success: true, 
    message: 'Grace Salon API is running',
    timestamp: new Date().toISOString()
  });
});

// Database connection test
app.get('/api/db-test', async (req, res) => {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    console.log('DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    
    await prisma.$connect();
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    
    res.json({
      success: true,
      message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      databaseUrl: process.env.DATABASE_URL ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
      testResult: result
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
      details: {
        message: error.message,
        code: error.code,
        databaseUrl: process.env.DATABASE_URL ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
      }
    });
  }
});

// Masters routes
app.get('/api/masters', async (req, res) => {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤...');

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');
    
    const masters = await prismaClient.master.findMany({
      where: {
        isActive: true
      },
      orderBy: {
        name: 'asc'
      }
    });

    console.log('‚úÖ –ú–∞—Å—Ç–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã:', masters.length, '–∑–∞–ø–∏—Å–µ–π');
    res.json({
      success: true,
      data: masters
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤:', error);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: error.message,
      code: error.code,
      meta: error.meta
    });
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤',
      details: error.message
    });
  }
});

// Get master by ID
app.get('/api/masters/:id', async (req, res) => {
  try {
    const masterId = parseInt(req.params.id);
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ —Å ID:', masterId);

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    const master = await prismaClient.master.findFirst({
      where: {
        id: masterId,
        isActive: true
      },
      include: {
        services: {
          include: {
            service: true
          }
        },
        schedules: true,
        _count: {
          select: {
            appointments: true,
            reviews: true
          }
        }
      }
    });

    if (!master) {
      return res.status(404).json({
        success: false,
        error: '–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    console.log('‚úÖ –ú–∞—Å—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω:', master.name);
    res.json({
      success: true,
      data: master
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞',
      details: error.message
    });
  }
});

// Get master services
app.get('/api/masters/:id/services', async (req, res) => {
  try {
    const masterId = parseInt(req.params.id);
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞ —Å ID:', masterId);

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    const master = await prismaClient.master.findFirst({
      where: {
        id: masterId,
        isActive: true
      }
    });

    if (!master) {
      return res.status(404).json({
        success: false,
        error: '–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    const services = await prismaClient.service.findMany({
      where: {
        isActive: true,
        masterServices: {
          some: {
            masterId: masterId
          }
        }
      },
      include: {
        masterServices: {
          where: {
            masterId: masterId
          },
          include: {
            master: true
          }
        },
        _count: {
          select: {
            appointments: true
          }
        }
      },
      orderBy: {
        name: 'asc'
      }
    });

    console.log('‚úÖ –£—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã:', services.length, '–∑–∞–ø–∏—Å–µ–π');
    res.json({
      success: true,
      data: services
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥ –º–∞—Å—Ç–µ—Ä–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥ –º–∞—Å—Ç–µ—Ä–∞',
      details: error.message
    });
  }
});

// Services routes
app.get('/api/services', async (req, res) => {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏...');

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    const services = await prismaClient.service.findMany({
      where: {
        isActive: true
      },
      include: {
        masterServices: {
          include: {
            master: true
          }
        },
        _count: {
          select: {
            appointments: true
          }
        }
      },
      orderBy: {
        name: 'asc'
      }
    });

    console.log('‚úÖ –£—Å–ª—É–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã:', services.length, '–∑–∞–ø–∏—Å–µ–π');
    res.json({
      success: true,
      data: services
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥',
      details: error.message
    });
  }
});

// Get service by ID
app.get('/api/services/:id', async (req, res) => {
  try {
    const serviceId = parseInt(req.params.id);
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥—É —Å ID:', serviceId);

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    const service = await prismaClient.service.findFirst({
      where: {
        id: serviceId,
        isActive: true
      },
      include: {
        masterServices: {
          include: {
            master: true
          }
        },
        _count: {
          select: {
            appointments: true
          }
        }
      }
    });

    if (!service) {
      return res.status(404).json({
        success: false,
        error: '–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    console.log('‚úÖ –£—Å–ª—É–≥–∞ –Ω–∞–π–¥–µ–Ω–∞:', service.name);
    res.json({
      success: true,
      data: service
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏',
      details: error.message
    });
  }
});

// Appointments routes
app.get('/api/appointments', async (req, res) => {
  try {
    const { status, page = 1, limit = 10 } = req.query;
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏...');
    
    const skip = (Number(page) - 1) * Number(limit);
    
    const where = { userId: 1 }; // –í—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    if (status) {
      where.status = status;
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    const appointments = await prismaClient.appointment.findMany({
      where,
      include: {
        master: true,
        service: true
      },
      orderBy: {
        appointmentDate: 'desc'
      },
      skip,
      take: Number(limit)
    });

    const total = await prismaClient.appointment.count({ where });

    console.log('‚úÖ –ó–∞–ø–∏—Å–∏ –ø–æ–ª—É—á–µ–Ω—ã:', appointments.length, '–∑–∞–ø–∏—Å–µ–π');
    res.json({
      success: true,
      data: appointments,
      pagination: {
        page: Number(page),
        limit: Number(limit),
        total,
        pages: Math.ceil(total / Number(limit))
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π',
      details: error.message
    });
  }
});

// Create appointment
app.post('/api/appointments', async (req, res) => {
  try {
    const { masterId, serviceId, appointmentDate, notes } = req.body;

    if (!masterId || !serviceId || !appointmentDate) {
      return res.status(400).json({
        success: false,
        error: '–ú–∞—Å—Ç–µ—Ä, —É—Å–ª—É–≥–∞ –∏ –¥–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    const master = await prismaClient.master.findUnique({
      where: { id: parseInt(masterId) }
    });

    if (!master) {
      return res.status(404).json({
        success: false,
        error: '–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    const service = await prismaClient.service.findUnique({
      where: { id: parseInt(serviceId) }
    });

    if (!service) {
      return res.status(404).json({
        success: false,
        error: '–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    const appointmentDateTime = new Date(appointmentDate);
    if (appointmentDateTime <= new Date()) {
      return res.status(400).json({
        success: false,
        error: '–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º'
      });
    }

    const appointment = await prismaClient.appointment.create({
      data: {
        userId: 1, // –í—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        masterId: parseInt(masterId),
        serviceId: parseInt(serviceId),
        appointmentDate: appointmentDateTime,
        notes: notes || null,
        totalPrice: service.price
      },
      include: {
        master: true,
        service: true
      }
    });

    res.status(201).json({
      success: true,
      data: appointment
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏'
    });
  }
});

// Admin routes
// Get masters for admin panel
app.get('/api/admin/masters', async (req, res) => {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...');

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    const masters = await prismaClient.master.findMany({
      orderBy: {
        name: 'asc'
      },
      include: {
        services: {
          include: {
            service: true
          }
        },
        _count: {
          select: {
            appointments: true,
            reviews: true
          }
        }
      }
    });

    console.log('‚úÖ –ú–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã:', masters.length, '–∑–∞–ø–∏—Å–µ–π');
    
    // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è BigInt –≤ —Å—Ç—Ä–æ–∫–∏
    const serializedMasters = masters.map(master => ({
      ...master,
      id: master.id.toString(),
      _count: {
        appointments: Number(master._count.appointments),
        reviews: Number(master._count.reviews)
      }
    }));
    
    res.json({
      success: true,
      data: serializedMasters
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤',
      details: error.message
    });
  }
});

// Get services for admin panel
app.get('/api/admin/services', async (req, res) => {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...');

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    const services = await prismaClient.service.findMany({
      include: {
        masterServices: {
          include: {
            master: true
          }
        },
        _count: {
          select: {
            appointments: true
          }
        }
      },
      orderBy: {
        name: 'asc'
      }
    });

    console.log('‚úÖ –£—Å–ª—É–≥–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã:', services.length, '–∑–∞–ø–∏—Å–µ–π');
    
    // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è BigInt –≤ —Å—Ç—Ä–æ–∫–∏
    const serializedServices = services.map(service => ({
      ...service,
      id: service.id.toString(),
      price: Number(service.price),
      _count: {
        appointments: Number(service._count.appointments)
      },
      masterServices: service.masterServices.map(ms => ({
        ...ms,
        id: ms.id.toString(),
        masterId: ms.masterId.toString(),
        serviceId: ms.serviceId.toString(),
        master: ms.master ? {
          ...ms.master,
          id: ms.master.id.toString()
        } : null
      }))
    }));
    
    res.json({
      success: true,
      data: serializedServices
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥',
      details: error.message
    });
  }
});

// Get appointments for admin panel
app.get('/api/admin/appointments', async (req, res) => {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏... (–≤–µ—Ä—Å–∏—è —Å BigInt —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π)');

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤–æ–æ–±—â–µ
    const totalCount = await prismaClient.appointment.count();
    console.log('üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ:', totalCount);

    if (totalCount === 0) {
      console.log('‚ö†Ô∏è –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
      return res.json({
        success: true,
        data: [],
        pagination: {
          page: 1,
          limit: 10,
          total: 0,
          pages: 0
        }
      });
    }

    const { status, page = 1, limit = 10 } = req.query;
    const skip = (Number(page) - 1) * Number(limit);
    
    const where = {};
    if (status) {
      where.status = status;
    }

    console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { where, skip, limit });

    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ include –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const appointments = await prismaClient.appointment.findMany({
      where,
      orderBy: {
        appointmentDate: 'desc'
      },
      skip,
      take: Number(limit)
    });

    console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—É—á–µ–Ω—ã:', appointments.length, '–∑–∞–ø–∏—Å–µ–π');

    // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω–æ
    const appointmentsWithRelations = await Promise.all(
      appointments.map(async (appointment) => {
        try {
          const [master, service, user] = await Promise.all([
            prismaClient.master.findUnique({ where: { id: appointment.masterId } }),
            prismaClient.service.findUnique({ where: { id: appointment.serviceId } }),
            prismaClient.user.findUnique({ where: { id: appointment.userId } })
          ]);

          return {
            ...appointment,
            master: master || null,
            service: service || null,
            user: user || null
          };
        } catch (relationError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏', appointment.id, ':', relationError);
          return {
            ...appointment,
            master: null,
            service: null,
            user: null
          };
        }
      })
    );

    const total = await prismaClient.appointment.count({ where });

    console.log('‚úÖ –ó–∞–ø–∏—Å–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã:', appointmentsWithRelations.length, '–∑–∞–ø–∏—Å–µ–π');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BigInt
    console.log('üîÑ –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏...');
    const serializedAppointments = serializeBigInt(appointmentsWithRelations);
    
    console.log('‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    res.json({
      success: true,
      data: serializedAppointments,
      pagination: {
        page: Number(page),
        limit: Number(limit),
        total,
        pages: Math.ceil(total / Number(limit))
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:', error);
    console.error('‚ùå Stack trace:', error.stack);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π',
      details: error.message
    });
  }
});

// Get users for admin panel
app.get('/api/admin/users', async (req, res) => {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...');

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    const users = await prismaClient.user.findMany({
      include: {
        _count: {
          select: {
            appointments: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã:', users.length, '–∑–∞–ø–∏—Å–µ–π');
    res.json({
      success: true,
      data: users
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      details: error.message
    });
  }
});

// Create master
app.post('/api/admin/masters', async (req, res) => {
  try {
    const { name, specialization, description, experience, photoUrl, serviceIds } = req.body;
    console.log('üîç –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞...');

    if (!name || !specialization) {
      return res.status(400).json({
        success: false,
        error: '–ò–º—è –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    const master = await prismaClient.master.create({
      data: {
        name,
        specialization,
        description: description || '',
        experience: experience || 0,
        photoUrl: photoUrl || '/images/masters/default.jpg',
        isActive: true
      }
    });

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —É—Å–ª—É–≥–∏, —Å–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏
    if (serviceIds && serviceIds.length > 0) {
      await prismaClient.masterService.createMany({
        data: serviceIds.map(serviceId => ({
          masterId: master.id,
          serviceId: serviceId
        }))
      });
    }

    console.log('‚úÖ –ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω:', master.name);
    res.status(201).json({
      success: true,
      data: master
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞',
      details: error.message
    });
  }
});

// Update master
app.put('/api/admin/masters/:id', async (req, res) => {
  try {
    const masterId = parseInt(req.params.id);
    const { name, specialization, description, experience, photoUrl, serviceIds } = req.body;
    console.log('üîç –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ —Å ID:', masterId);

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    const master = await prismaClient.master.update({
      where: { id: masterId },
      data: {
        name,
        specialization,
        description,
        experience,
        photoUrl
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Å —É—Å–ª—É–≥–∞–º–∏
    if (serviceIds) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏
      await prismaClient.masterService.deleteMany({
        where: { masterId: masterId }
      });

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏
      if (serviceIds.length > 0) {
        await prismaClient.masterService.createMany({
          data: serviceIds.map(serviceId => ({
            masterId: masterId,
            serviceId: serviceId
          }))
        });
      }
    }

    console.log('‚úÖ –ú–∞—Å—Ç–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω:', master.name);
    res.json({
      success: true,
      data: master
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞',
      details: error.message
    });
  }
});

// Delete master
app.delete('/api/admin/masters/:id', async (req, res) => {
  try {
    const masterId = parseInt(req.params.id);
    console.log('üîç –£–¥–∞–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ —Å ID:', masterId);

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å —É—Å–ª—É–≥–∞–º–∏
    await prismaClient.masterService.deleteMany({
      where: { masterId: masterId }
    });

    // –£–¥–∞–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
    await prismaClient.master.delete({
      where: { id: masterId }
    });

    console.log('‚úÖ –ú–∞—Å—Ç–µ—Ä —É–¥–∞–ª–µ–Ω:', masterId);
    res.json({
      success: true,
      message: '–ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞',
      details: error.message
    });
  }
});

// Create service
app.post('/api/admin/services', async (req, res) => {
  try {
    const { name, description, price, duration, category, masterIds } = req.body;
    console.log('üîç –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥—É...');

    if (!name || !price || !duration) {
      return res.status(400).json({
        success: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    const service = await prismaClient.service.create({
      data: {
        name,
        description: description || '',
        price: parseInt(price),
        duration: parseInt(duration),
        category: category || 'other',
        isActive: true
      }
    });

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –º–∞—Å—Ç–µ—Ä–∞, —Å–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏
    if (masterIds && masterIds.length > 0) {
      await prismaClient.masterService.createMany({
        data: masterIds.map(masterId => ({
          masterId: masterId,
          serviceId: service.id
        }))
      });
    }

    console.log('‚úÖ –£—Å–ª—É–≥–∞ —Å–æ–∑–¥–∞–Ω–∞:', service.name);
    res.status(201).json({
      success: true,
      data: service
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏',
      details: error.message
    });
  }
});

// Update service
app.put('/api/admin/services/:id', async (req, res) => {
  try {
    const serviceId = parseInt(req.params.id);
    const { name, description, price, duration, category, masterIds } = req.body;
    console.log('üîç –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª—É–≥—É —Å ID:', serviceId);

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    const service = await prismaClient.service.update({
      where: { id: serviceId },
      data: {
        name,
        description,
        price: parseInt(price),
        duration: parseInt(duration),
        category
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏
    if (masterIds) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏
      await prismaClient.masterService.deleteMany({
        where: { serviceId: serviceId }
      });

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏
      if (masterIds.length > 0) {
        await prismaClient.masterService.createMany({
          data: masterIds.map(masterId => ({
            masterId: masterId,
            serviceId: serviceId
          }))
        });
      }
    }

    console.log('‚úÖ –£—Å–ª—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', service.name);
    res.json({
      success: true,
      data: service
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏',
      details: error.message
    });
  }
});

// Delete service
app.delete('/api/admin/services/:id', async (req, res) => {
  try {
    const serviceId = parseInt(req.params.id);
    console.log('üîç –£–¥–∞–ª—è–µ–º —É—Å–ª—É–≥—É —Å ID:', serviceId);

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏
    await prismaClient.masterService.deleteMany({
      where: { serviceId: serviceId }
    });

    // –£–¥–∞–ª—è–µ–º —É—Å–ª—É–≥—É
    await prismaClient.service.delete({
      where: { id: serviceId }
    });

    console.log('‚úÖ –£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞:', serviceId);
    res.json({
      success: true,
      message: '–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏',
      details: error.message
    });
  }
});

// Update appointment status
app.put('/api/admin/appointments/:id/status', async (req, res) => {
  try {
    const appointmentId = parseInt(req.params.id);
    const { status } = req.body;
    console.log('üîç –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ —Å ID:', appointmentId);

    if (!status) {
      return res.status(400).json({
        success: false,
        error: '–°—Ç–∞—Ç—É—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    const appointment = await prismaClient.appointment.update({
      where: { id: appointmentId },
      data: { status },
      include: {
        master: true,
        service: true,
        user: true
      }
    });

    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω:', appointmentId);
    res.json({
      success: true,
      data: appointment
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏',
      details: error.message
    });
  }
});

app.get('/api/admin/dashboard', async (req, res) => {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω –¥–∞—à–±–æ—Ä–¥...');

    // –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Prisma Client
    const prismaClient = await getPrismaClient();
    console.log('‚úÖ Prisma Client –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');

    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);

    const todayAppointments = await prismaClient.appointment.count({
      where: {
        appointmentDate: {
          gte: today,
          lt: tomorrow
        }
      }
    });

    const totalAppointments = await prismaClient.appointment.count();
    const totalMasters = await prismaClient.master.count();
    const totalServices = await prismaClient.service.count();
    const totalUsers = await prismaClient.user.count();

    const todayRevenue = await prismaClient.appointment.aggregate({
      where: {
        appointmentDate: {
          gte: today,
          lt: tomorrow
        },
        status: 'COMPLETED'
      },
      _sum: {
        totalPrice: true
      }
    });

    res.json({
      success: true,
      data: {
        today: {
          appointments: todayAppointments,
          revenue: todayRevenue._sum.totalPrice || 0
        },
        total: {
          appointments: totalAppointments,
          masters: totalMasters,
          services: totalServices,
          users: totalUsers
        }
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
  }
});

// Error handling
app.use((err, req, res, next) => {
  console.error('Unhandled error:', err);
  res.status(500).json({
    success: false,
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'
  });
});

module.exports = app;