// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
const https = require('https');

const BOT_TOKEN = '7725254943:AAGHFlrj2oDfLxjrNaWjYuJ_nhUlgr2qLZU';

console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞...');
console.log('ü§ñ –¢–æ–∫–µ–Ω:', BOT_TOKEN);

const options = {
  hostname: 'api.telegram.org',
  port: 443,
  path: `/bot${BOT_TOKEN}/getMe`,
  method: 'GET'
};

const req = https.request(options, (res) => {
  console.log('üìä –°—Ç–∞—Ç—É—Å:', res.statusCode);
  
  let data = '';
  res.on('data', (chunk) => {
    data += chunk;
  });
  
  res.on('end', () => {
    const response = JSON.parse(data);
    console.log('üìã –û—Ç–≤–µ—Ç –æ—Ç Telegram API:', response);
    
    if (res.statusCode === 200 && response.ok) {
      console.log('‚úÖ –¢–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç! –ë–æ—Ç:', response.result.first_name);
      console.log('‚úÖ Username –±–æ—Ç–∞:', response.result.username);
      console.log('‚úÖ ID –±–æ—Ç–∞:', response.result.id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook...');
      const webhookOptions = {
        hostname: 'api.telegram.org',
        port: 443,
        path: `/bot${BOT_TOKEN}/getWebhookInfo`,
        method: 'GET'
      };
      
      const webhookReq = https.request(webhookOptions, (webhookRes) => {
        let webhookData = '';
        webhookRes.on('data', (chunk) => {
          webhookData += chunk;
        });
        
        webhookRes.on('end', () => {
          const webhookInfo = JSON.parse(webhookData);
          console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:', webhookInfo);
          
          if (webhookInfo.ok) {
            console.log('üéØ Webhook URL:', webhookInfo.result.url);
            console.log('üìä Pending updates:', webhookInfo.result.pending_update_count);
            
            if (webhookInfo.result.last_error_message) {
              console.log('‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ webhook:', webhookInfo.result.last_error_message);
              console.log('‚ö†Ô∏è –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏:', new Date(webhookInfo.result.last_error_date * 1000));
            }
          }
        });
      });
      
      webhookReq.on('error', (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook:', err.message);
      });
      
      webhookReq.end();
    } else {
      console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', response.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  });
});

req.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', err.message);
});

req.end();
