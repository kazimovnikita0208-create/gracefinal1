import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const { telegramId, firstName, lastName, username } = await request.json();
    
    if (!telegramId) {
      return NextResponse.json({ 
        success: false, 
        error: 'Telegram ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      }, { status: 400 });
    }

    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await prisma.user.findUnique({
      where: { telegramId: BigInt(telegramId) }
    });

    if (!user) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üë§ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { telegramId, firstName, lastName, username });
      user = await prisma.user.create({
        data: {
          telegramId: BigInt(telegramId),
          firstName: firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          lastName: lastName || null,
          username: username || null
        }
      });
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', user.id);
    } else {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.id);
    }

    // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º BigInt –¥–ª—è JSON
    const serializedUser = {
      ...user,
      telegramId: user.telegramId.toString()
    };

    return NextResponse.json({
      success: true,
      data: serializedUser
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
    }, { status: 500 });
  }
}
