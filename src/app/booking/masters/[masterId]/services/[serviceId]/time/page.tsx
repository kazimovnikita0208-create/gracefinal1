'use client';

import React, { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useTelegram } from '@/hooks/useTelegram';
import { Layout } from '@/components/layout';
import { NeonButton } from '@/components/ui/neon-button';
import Modal from '@/components/ui/Modal';
import { Clock, Calendar, User, Star } from 'lucide-react';
import { api } from '@/lib/api';
import { formatPrice } from '@/lib/utils';
import { LoadingSpinner } from '@/components/ui/LoadingSpinner';

// –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏
const generateAvailableDates = () => {
  const dates = [];
  const today = new Date();
  
  for (let i = 1; i <= 14; i++) {
    const date = new Date(today);
    date.setDate(today.getDate() + i);
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
    if (date.getDay() !== 0) {
      dates.push({
        date: date,
        dateString: date.toISOString().split('T')[0],
        dayName: date.toLocaleDateString('ru-RU', { weekday: 'short' }),
        dayNumber: date.getDate(),
        monthName: date.toLocaleDateString('ru-RU', { month: 'short' }),
        available: Math.random() > 0.2 // 80% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      });
    }
  }
  
  return dates;
};

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
const generateAvailableTimes = (date: string) => {
  console.log('generateAvailableTimes called with date:', date);
  
  // –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
  const times = [
    { time: '09:00', available: true },
    { time: '09:30', available: true },
    { time: '10:00', available: true },
    { time: '10:30', available: true },
    { time: '11:00', available: true },
    { time: '11:30', available: true },
    { time: '12:00', available: true },
    { time: '12:30', available: true },
    { time: '13:00', available: true },
    { time: '13:30', available: true },
    { time: '14:00', available: true },
    { time: '14:30', available: true },
    { time: '15:00', available: true },
    { time: '15:30', available: true },
    { time: '16:00', available: true },
    { time: '16:30', available: true },
    { time: '17:00', available: true },
    { time: '17:30', available: true }
  ];
  
  console.log('Generated times:', times);
  return times;
};

// formatPrice –±–µ—Ä–µ–º –∏–∑ utils (–ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∫–æ–ø–µ–π–∫–∏ ‚Üí —Ä—É–±–ª–∏)

export default function TimeSelectionPage() {
  const params = useParams();
  const router = useRouter();
  const { hapticFeedback } = useTelegram();
  
  const [selectedDate, setSelectedDate] = useState<string | null>(null);
  const [selectedTime, setSelectedTime] = useState<string | null>(null);
  const [showTimeModal, setShowTimeModal] = useState(false);
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [availableDates, setAvailableDates] = useState<any[]>([]);
  const [availableTimes, setAvailableTimes] = useState<any[]>([]);

  const masterId = parseInt(params.masterId as string);
  const serviceId = parseInt(params.serviceId as string);
  
  const [master, setMaster] = useState<any | null>(null);
  const [service, setService] = useState<any | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let cancelled = false;
    async function load() {
      try {
        setLoading(true);
        setError(null);
        
        const [mRes, sRes] = await Promise.all([
          api.getMaster(masterId),
          api.getServicesByMaster(masterId)
        ]);
        if (cancelled) return;
        if (mRes.success && mRes.data) setMaster(mRes.data);
        if (sRes.success && sRes.data) {
          const found = sRes.data.find((s: any) => s.id === serviceId);
          setService(found || null);
        }
      } catch (e: any) {
        if (!cancelled) setError(e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
      } finally {
        if (!cancelled) setLoading(false);
      }
    }
    if (Number.isFinite(masterId) && Number.isFinite(serviceId)) load();
    return () => { cancelled = true; };
  }, [masterId, serviceId]);

  useEffect(() => {
    setAvailableDates(generateAvailableDates());
  }, []);

  const handleDateSelect = (dateString: string) => {
    hapticFeedback.impact('light');
    setSelectedDate(dateString);
    const times = generateAvailableTimes(dateString);
    console.log('Generated times for date', dateString, ':', times);
    setAvailableTimes(times);
    setShowTimeModal(true);
  };

  const handleTimeSelect = (time: string) => {
    hapticFeedback.impact('light');
    setSelectedTime(time);
  };

  const handleCloseTimeModal = () => {
    setShowTimeModal(false);
  };

  const handleConfirmBooking = async () => {
    if (selectedDate && selectedTime && master && service) {
      try {
        hapticFeedback.impact('medium');
        const iso = new Date(`${selectedDate}T${selectedTime}:00`).toISOString();
        await api.createAppointment({
          masterId: masterId,
          serviceId: serviceId,
          appointmentDate: iso,
        });
        // –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏
        setShowTimeModal(false);
        router.push('/profile/appointments');
      } catch (e) {
        // –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        setShowTimeModal(false);
        setShowConfirmModal(true);
      }
    }
  };

  const handleCloseConfirmModal = () => {
    setShowConfirmModal(false);
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    router.push('/');
  };

  if (loading) {
    return (
      <Layout 
        title="–ó–∞–≥—Ä—É–∑–∫–∞" 
        showBackButton={true}
        backButtonHref="/booking/masters"
      >
        <div className="w-full max-w-sm mx-auto px-4 flex flex-col justify-center min-h-screen py-4 pb-20">
          <LoadingSpinner size="lg" text="–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ –∏ —É—Å–ª—É–≥–∏..." />
        </div>
      </Layout>
    );
  }

  if (error || !master || !service) {
    return (
      <Layout 
        title="–û—à–∏–±–∫–∞" 
        showBackButton={true}
        backButtonHref="/booking/masters"
      >
        <div className="w-full max-w-sm mx-auto px-4 flex flex-col justify-center min-h-screen py-4 pb-20">
          <div className="flex flex-col items-center justify-center text-center">
            <div className="text-6xl mb-4">üòî</div>
            <h1 className="text-xl font-bold text-white mb-2 drop-shadow-sm">
              –ú–∞—Å—Ç–µ—Ä –∏–ª–∏ —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </h1>
            <p className="text-white/80 mb-6 drop-shadow-sm">
              –í—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä –∏–ª–∏ —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ
            </p>
            <NeonButton
              variant="primary"
              size="lg"
              onClick={() => router.push('/booking/masters')}
            >
              –í—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ
            </NeonButton>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout 
      title="–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏" 
      showBackButton={true}
      backButtonHref={`/booking/masters/${masterId}/services`}
    >
      <div className="w-full max-w-sm mx-auto px-4 flex flex-col justify-center min-h-screen py-4 pb-20">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏ */}
        <div className="mb-4">
          <div className="bg-white/10 backdrop-blur-sm border border-white/20 rounded-xl p-3 mb-4">
            <div className="flex items-center space-x-3 mb-3">
              <div className="w-10 h-10 rounded-full bg-gradient-to-br from-primary-400 to-primary-600 flex items-center justify-center text-white font-bold text-sm flex-shrink-0">
                {master.name.split(' ').map((n: string) => n[0]).join('')}
              </div>
              <div className="flex-1 min-w-0">
                <h2 className="text-sm font-bold text-white mb-1 drop-shadow-sm truncate">
                  {master.name}
                </h2>
                <p className="text-white/80 text-xs drop-shadow-sm truncate">
                  {service.name}
                </p>
              </div>
            </div>
            <div className="flex items-center justify-between text-xs text-white/80">
              <span className="font-medium text-primary-200">
                {formatPrice(service.price)}
              </span>
              <div className="flex items-center space-x-1">
                <Clock className="w-3 h-3" />
                <span>{service.duration}</span>
              </div>
            </div>
          </div>
        </div>

        {/* –í—ã–±–æ—Ä –¥–∞—Ç—ã */}
        <div className="mb-4">
          <h3 className="text-sm font-semibold text-white mb-3 drop-shadow-sm">
            –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É
          </h3>
          <div className="grid grid-cols-2 gap-2">
            {availableDates.map((dateInfo) => (
              <div
                key={dateInfo.dateString}
                className={`cursor-pointer transition-all duration-300 ${
                  !dateInfo.available ? 'opacity-50 cursor-not-allowed' : 'hover:scale-105'
                }`}
                onClick={() => dateInfo.available && handleDateSelect(dateInfo.dateString)}
              >
                <NeonButton
                  variant={selectedDate === dateInfo.dateString ? "salon" : "primary"}
                  size="xl"
                  className={`w-full p-3 hover:scale-105 active:scale-95 transition-all duration-300 min-h-[60px] touch-manipulation ${
                    !dateInfo.available ? 'opacity-50 cursor-not-allowed' : ''
                  }`}
                  disabled={!dateInfo.available}
                >
                  <div className="text-center">
                    <div className="text-xs text-white/80 mb-1">
                      {dateInfo.dayName}
                    </div>
                    <div className="text-lg font-bold text-white mb-1">
                      {dateInfo.dayNumber}
                    </div>
                    <div className="text-xs text-white/80">
                      {dateInfo.monthName}
                    </div>
                  </div>
                </NeonButton>
              </div>
            ))}
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
        {selectedDate && selectedTime && (
          <div className="fixed bottom-2 left-2 right-2 z-10">
            <NeonButton
              variant="salon"
              size="xl"
              className="w-full py-3 font-semibold text-sm hover:scale-105 active:scale-95 transition-all duration-300 shadow-lg"
              onClick={handleConfirmBooking}
            >
              –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å
            </NeonButton>
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ */}
        <div className="mt-4 mb-4">
          <div className="bg-white/10 backdrop-blur-sm border border-white/20 rounded-xl p-3">
            <h4 className="text-white font-semibold mb-2 text-xs drop-shadow-sm">
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏
            </h4>
            <div className="space-y-1 text-xs text-white/80 drop-shadow-sm">
              <p>‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è</p>
              <p>‚Ä¢ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</p>
              <p>‚Ä¢ –û—Ç–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –ø—Ä–∏–µ–º–∞</p>
            </div>
          </div>
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ */}
        <Modal
          isOpen={showTimeModal}
          onClose={handleCloseTimeModal}
          title="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è"
        >
          <div className="p-4 text-white">
            <div className="text-sm text-white/80 mb-4 drop-shadow-sm">
              –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {selectedDate ? new Date(selectedDate).toLocaleDateString('ru-RU', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              }) : ''}
            </div>
            <div className="grid grid-cols-3 gap-2 max-h-60 overflow-y-auto">
              {availableTimes.map((timeInfo, index) => (
                <button
                  key={`${timeInfo.time}-${index}`}
                  onClick={() => handleTimeSelect(timeInfo.time)}
                  className={`p-3 rounded-lg text-sm font-medium transition-all duration-200 ${
                    selectedTime === timeInfo.time
                      ? 'bg-primary-500 text-white shadow-lg shadow-primary-500/30'
                      : 'bg-white/10 text-white hover:bg-white/20 border border-white/20'
                  }`}
                >
                  {timeInfo.time}
                </button>
              ))}
            </div>
            
            {selectedTime && (
              <div className="mt-4 pt-4 border-t border-white/20">
                <div className="text-center">
                  <div className="text-sm text-white/80 mb-3 drop-shadow-sm">
                    –í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è: <span className="font-semibold text-white">{selectedTime}</span>
                  </div>
                  <NeonButton
                    variant="salon"
                    size="lg"
                    className="w-full hover:scale-105 active:scale-95 transition-all duration-300"
                    onClick={handleConfirmBooking}
                  >
                    –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
                  </NeonButton>
                </div>
              </div>
            )}
          </div>
        </Modal>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ */}
        <Modal
          isOpen={showConfirmModal}
          onClose={handleCloseConfirmModal}
          title="–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
        >
          <div className="p-6 text-white">
            <div className="text-center mb-6">
              <div className="w-16 h-16 bg-gradient-to-br from-green-400 to-green-600 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg shadow-green-500/30">
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <h3 className="text-xl font-bold text-white mb-2 drop-shadow-sm">
                –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!
              </h3>
              <p className="text-white/80 drop-shadow-sm">
                –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
              </p>
            </div>

            <div className="bg-white/10 backdrop-blur-sm rounded-xl p-5 mb-6 border border-white/20 shadow-lg">
              <h4 className="font-bold text-white mb-4 text-center drop-shadow-sm">–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏</h4>
              <div className="space-y-3">
                <div className="flex items-center justify-between py-2 border-b border-white/20">
                  <span className="text-white/80 font-medium">–ú–∞—Å—Ç–µ—Ä:</span>
                  <span className="font-bold text-white">{master?.name}</span>
                </div>
                <div className="flex items-center justify-between py-2 border-b border-white/20">
                  <span className="text-white/80 font-medium">–£—Å–ª—É–≥–∞:</span>
                  <span className="font-bold text-white">{service?.name}</span>
                </div>
                <div className="flex items-center justify-between py-2 border-b border-white/20">
                  <span className="text-white/80 font-medium">–î–∞—Ç–∞:</span>
                  <span className="font-bold text-white">
                    {selectedDate ? new Date(selectedDate).toLocaleDateString('ru-RU', {
                      weekday: 'long',
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    }) : ''}
                  </span>
                </div>
                <div className="flex items-center justify-between py-2 border-b border-white/20">
                  <span className="text-white/80 font-medium">–í—Ä–µ–º—è:</span>
                  <span className="font-bold text-white">{selectedTime}</span>
                </div>
                <div className="flex items-center justify-between py-2 border-b border-white/20">
                  <span className="text-white/80 font-medium">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                  <span className="font-bold text-green-400 text-lg">{formatPrice(service?.price || 0)}</span>
                </div>
                <div className="flex items-center justify-between py-2">
                  <span className="text-white/80 font-medium">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                  <span className="font-bold text-white">{service?.duration}</span>
                </div>
              </div>
            </div>

            <div className="text-center">
              <NeonButton
                variant="salon"
                size="xl"
                className="w-full py-4 text-lg font-bold hover:scale-105 active:scale-95 transition-all duration-300 shadow-lg"
                onClick={handleCloseConfirmModal}
              >
                –û—Ç–ª–∏—á–Ω–æ! ‚ú®
              </NeonButton>
            </div>
          </div>
        </Modal>
      </div>
    </Layout>
  );
}
