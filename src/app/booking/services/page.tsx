'use client';

import React, { useState, useEffect } from 'react';
import { useSearchParams } from 'next/navigation';
import Layout from '@/components/layout/Layout';
import { NeonButton } from '@/components/ui/neon-button';
import { useTelegram } from '@/hooks/useTelegram';

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å–ª—É–≥
const mockServices = [
  {
    id: 1,
    name: '–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
    description: '–û–±—Ä–µ–∑–Ω–æ–π –º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫–æ–º',
    duration: '60 –º–∏–Ω',
    price: 2000,
    category: 'manicure',
    image: 'üíÖ',
    popular: true
  },
  {
    id: 2,
    name: '–ú–∞–Ω–∏–∫—é—Ä + –ø–æ–∫—Ä—ã—Ç–∏–µ',
    description: '–ú–∞–Ω–∏–∫—é—Ä —Å —É–∫—Ä–µ–ø–ª—è—é—â–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º',
    duration: '90 –º–∏–Ω',
    price: 2500,
    category: 'manicure',
    image: 'üíÖ',
    popular: true
  },
  {
    id: 3,
    name: '–ü–µ–¥–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
    description: '–û–±—Ä–µ–∑–Ω–æ–π –ø–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º',
    duration: '120 –º–∏–Ω',
    price: 3000,
    category: 'pedicure',
    image: 'ü¶∂',
    popular: false
  },
  {
    id: 4,
    name: '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –±—Ä–æ–≤–µ–π',
    description: '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ñ–æ—Ä–º—ã –±—Ä–æ–≤–µ–π –≤–æ—Å–∫–æ–º',
    duration: '30 –º–∏–Ω',
    price: 1000,
    category: 'eyebrows',
    image: 'üëÅÔ∏è',
    popular: true
  },
  {
    id: 5,
    name: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π',
    description: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π –∫—Ä–∞—Å–∫–æ–π',
    duration: '45 –º–∏–Ω',
    price: 1500,
    category: 'eyebrows',
    image: 'üëÅÔ∏è',
    popular: false
  },
  {
    id: 6,
    name: '–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü',
    description: '–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü –¥–ª—è –æ–±—ä–µ–º–∞',
    duration: '60 –º–∏–Ω',
    price: 3500,
    category: 'eyelashes',
    image: 'üëÅÔ∏è',
    popular: true
  },
  {
    id: 7,
    name: '–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü',
    description: '–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü –ø–æ—Ä–µ—Å–Ω–∏—á–Ω–æ',
    duration: '120 –º–∏–Ω',
    price: 4000,
    category: 'eyelashes',
    image: 'üëÅÔ∏è',
    popular: false
  },
  {
    id: 8,
    name: '–ú–∞—Å—Å–∞–∂ –ª–∏—Ü–∞',
    description: '–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ –ª–∏—Ü–∞',
    duration: '45 –º–∏–Ω',
    price: 2500,
    category: 'face',
    image: 'üòå',
    popular: false
  }
];

const categories = [
  { key: 'all', label: '–í—Å–µ —É—Å–ª—É–≥–∏', icon: 'üíÖ' },
  { key: 'manicure', label: '–ú–∞–Ω–∏–∫—é—Ä', icon: 'üíÖ' },
  { key: 'pedicure', label: '–ü–µ–¥–∏–∫—é—Ä', icon: 'ü¶∂' },
  { key: 'eyebrows', label: '–ë—Ä–æ–≤–∏', icon: 'üëÅÔ∏è' },
  { key: 'eyelashes', label: '–†–µ—Å–Ω–∏—Ü—ã', icon: 'üëÅÔ∏è' },
  { key: 'face', label: '–õ–∏—Ü–æ', icon: 'üòå' }
];

export default function ServicesPage() {
  const { hapticFeedback } = useTelegram();
  const searchParams = useSearchParams();
  const [selectedServices, setSelectedServices] = useState<number[]>([]);
  const [selectedDateTime, setSelectedDateTime] = useState<{date: string, time: string} | null>(null);
  const [selectedMaster, setSelectedMaster] = useState<{id: number, name: string} | null>(null);

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0
    }).format(price);
  };


  const handleServiceToggle = (serviceId: number) => {
    setSelectedServices(prev => {
      if (prev.includes(serviceId)) {
        return prev.filter(id => id !== serviceId);
      } else {
        return [...prev, serviceId];
      }
    });
    hapticFeedback.impact('light');
  };

  const handleContinue = () => {
    if (selectedServices.length === 0) {
      hapticFeedback.impact('heavy');
      return;
    }
    hapticFeedback.impact('medium');
    
    if (selectedMaster && selectedDateTime) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä –∏ –≤—Ä–µ–º—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–ø–∏—Å–∏
      const serviceIds = selectedServices.join(',');
      window.location.href = `/booking/confirmation?masterId=${selectedMaster.id}&serviceIds=${serviceIds}&date=${selectedDateTime.date}&time=${selectedDateTime.time}`;
    } else if (selectedDateTime) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–∞—Å—Ç–µ—Ä–∞
      const serviceIds = selectedServices.join(',');
      window.location.href = `/booking/masters?services=${serviceIds}&date=${selectedDateTime.date}&time=${selectedDateTime.time}`;
    } else {
      // –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –º–∞—Å—Ç–µ—Ä–∞
      const serviceIds = selectedServices.join(',');
      window.location.href = `/booking/masters?services=${serviceIds}`;
    }
  };

  useEffect(() => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
    const dateParam = searchParams?.get('date');
    const timeParam = searchParams?.get('time');
    const masterIdParam = searchParams?.get('masterId');
    const masterNameParam = searchParams?.get('masterName');
    
    if (dateParam && timeParam) {
      setSelectedDateTime({ date: dateParam, time: timeParam });
    }
    
    if (masterIdParam && masterNameParam) {
      setSelectedMaster({ 
        id: parseInt(masterIdParam), 
        name: decodeURIComponent(masterNameParam) 
      });
    }
  }, [searchParams]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏
  const filteredServices = mockServices;

  return (
    <Layout 
      title="–í—ã–±–æ—Ä —É—Å–ª—É–≥–∏"
      showBackButton={true}
      backButtonHref="/booking"
    >
      <div className="container mx-auto max-w-sm px-4 py-4 pb-20">
        {/* –í—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä */}
        {selectedMaster && (
          <div className="bg-purple-500/20 border border-purple-400/30 rounded-xl p-4 mb-6">
            <h4 className="font-semibold text-white mb-3 drop-shadow-sm">
              üë©‚Äçüíº –í—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä
            </h4>
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-white/80">–ú–∞—Å—Ç–µ—Ä:</span>
                <span className="font-semibold text-white">{selectedMaster.name}</span>
              </div>
            </div>
          </div>
        )}

        {/* –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è */}
        {selectedDateTime && (
          <div className="bg-blue-500/20 border border-blue-400/30 rounded-xl p-4 mb-6">
            <h4 className="font-semibold text-white mb-3 drop-shadow-sm">
              ‚è∞ –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            </h4>
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-white/80">–î–∞—Ç–∞:</span>
                <span className="font-semibold text-white">
                  {new Date(selectedDateTime.date).toLocaleDateString('ru-RU', {
                    weekday: 'long',
                    day: 'numeric',
                    month: 'long'
                  })}
                </span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-white/80">–í—Ä–µ–º—è:</span>
                <span className="font-semibold text-white">{selectedDateTime.time}</span>
              </div>
            </div>
          </div>
        )}


        {/* –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ */}
        <div className="space-y-3 mb-6">
          <h3 className="text-xl font-bold text-white drop-shadow-sm mb-4">
            –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏
          </h3>
          
          {filteredServices.length === 0 ? (
            <div className="text-center py-8">
              <div className="text-4xl mb-3">üîç</div>
              <p className="text-white/70">–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            </div>
          ) : (
            filteredServices.map((service) => (
              <div
                key={service.id}
                className={`bg-gray-800/50 backdrop-blur-sm border rounded-xl p-4 cursor-pointer transition-all duration-200 ${
                  selectedServices.includes(service.id)
                    ? 'border-primary-400 bg-primary-500/20'
                    : 'border-gray-600/30 hover:border-gray-500/50'
                }`}
                onClick={() => handleServiceToggle(service.id)}
              >
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <h4 className="font-bold text-white text-base mb-1 drop-shadow-sm">{service.name}</h4>
                    <p className="text-white text-sm">{formatPrice(service.price)}</p>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className="flex items-center space-x-1 text-white text-sm">
                      <span>üïí</span>
                      <span>{service.duration}</span>
                    </div>
                    <div className={`w-5 h-5 rounded-full border-2 flex items-center justify-center ${
                      selectedServices.includes(service.id)
                        ? 'border-primary-400 bg-primary-500'
                        : 'border-gray-400'
                    }`}>
                      {selectedServices.includes(service.id) && (
                        <div className="w-2 h-2 bg-white rounded-full"></div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>

        {/* –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ */}
        {selectedServices.length > 0 && (
          <div className="bg-primary-500/20 border border-primary-400/30 rounded-xl p-4 mb-6">
            <h4 className="font-semibold text-white mb-3 drop-shadow-sm">
              –í—ã–±—Ä–∞–Ω–æ —É—Å–ª—É–≥: {selectedServices.length}
            </h4>
            <div className="space-y-2">
              {selectedServices.map(serviceId => {
                const service = mockServices.find(s => s.id === serviceId);
                if (!service) return null;
                return (
                  <div key={serviceId} className="flex items-center justify-between text-sm">
                    <span className="text-white">{service.name}</span>
                    <span className="text-green-400 font-medium">{formatPrice(service.price)}</span>
                  </div>
                );
              })}
            </div>
            <div className="flex items-center justify-between pt-2 border-t border-primary-400/20 mt-3">
              <span className="font-semibold text-white">–ò—Ç–æ–≥–æ:</span>
              <span className="font-bold text-green-400 text-lg">
                {formatPrice(selectedServices.reduce((sum, id) => {
                  const service = mockServices.find(s => s.id === id);
                  return sum + (service?.price || 0);
                }, 0))}
              </span>
            </div>
          </div>
        )}

        {/* –í—Å–ø–ª—ã–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è */}
        {selectedServices.length > 0 && (
          <div className="fixed bottom-4 left-4 right-4 z-40 animate-slide-up">
            <NeonButton
              variant="salon"
              size="xl"
              className="w-full py-4 text-lg font-bold hover:scale-105 active:scale-95 transition-all duration-300 shadow-2xl"
              onClick={handleContinue}
            >
              {selectedMaster && selectedDateTime
                ? `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å (${selectedServices.length})`
                : `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –≤—ã–±–æ—Ä—É –º–∞—Å—Ç–µ—Ä–∞ (${selectedServices.length})`
              }
            </NeonButton>
          </div>
        )}
      </div>
    </Layout>
  );
}
