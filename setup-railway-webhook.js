// –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ Railway
const https = require('https');

const botToken = '7725254943:AAGHFlrj2oDfLxjrNaWjYuJ_nhUlgr2qLZU';

// –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Railway URL –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
const railwayUrl = process.argv[2];

if (!railwayUrl) {
  console.log('‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ Railway URL');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node setup-railway-webhook.js https://your-project.railway.app');
  process.exit(1);
}

const webhookUrl = `${railwayUrl}/webhook`;

console.log('üöÄ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è Railway...');
console.log('ü§ñ –¢–æ–∫–µ–Ω –±–æ—Ç–∞:', botToken);
console.log('üåê Railway URL:', railwayUrl);
console.log('üîó Webhook URL:', webhookUrl);

// –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook...');
const deleteOptions = {
  hostname: 'api.telegram.org',
  port: 443,
  path: `/bot${botToken}/deleteWebhook`,
  method: 'POST'
};

const deleteReq = https.request(deleteOptions, (deleteRes) => {
  let deleteData = '';
  deleteRes.on('data', (chunk) => {
    deleteData += chunk;
  });
  
  deleteRes.on('end', () => {
    console.log('üóëÔ∏è –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω:', deleteData);
    
    // –¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    console.log('üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook –¥–ª—è Railway...');
    
    const postData = JSON.stringify({
      url: webhookUrl
    });

    const options = {
      hostname: 'api.telegram.org',
      port: 443,
      path: `/bot${botToken}/setWebhook`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = https.request(options, (res) => {
      console.log(`üìä –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ${res.statusCode}`);
      
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è Railway!');
        console.log('üìä –û—Ç–≤–µ—Ç:', data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook...');
        const infoOptions = {
          hostname: 'api.telegram.org',
          port: 443,
          path: `/bot${botToken}/getWebhookInfo`,
          method: 'GET'
        };
        
        const infoReq = https.request(infoOptions, (infoRes) => {
          let infoData = '';
          infoRes.on('data', (chunk) => {
            infoData += chunk;
          });
          
          infoRes.on('end', () => {
            console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:', infoData);
            
            try {
              const webhookInfo = JSON.parse(infoData);
              if (webhookInfo.ok) {
                console.log('üéØ Webhook URL:', webhookInfo.result.url);
                console.log('üìä Pending updates:', webhookInfo.result.pending_update_count);
                if (webhookInfo.result.last_error_message) {
                  console.log('‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:', webhookInfo.result.last_error_message);
                } else {
                  console.log('‚úÖ –ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ webhook!');
                }
                console.log('üéâ –ë–û–¢ –ù–ê RAILWAY –ì–û–¢–û–í! –û–¢–ü–†–ê–í–¨–¢–ï /start –ë–û–¢–£!');
              }
            } catch (e) {
              console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ webhook info:', e.message);
            }
          });
        });
        
        infoReq.on('error', (err) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook:', err.message);
        });
        
        infoReq.end();
      });
    });

    req.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', err.message);
    });

    req.write(postData);
    req.end();
  });
});

deleteReq.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook:', err.message);
});

deleteReq.end();


